separator: " | "

symbol_lists:
  - name: sound
    symbols: ["Óéç", "Óèî", "Óèì", "Óèí", "Óèë", "Óèê", "Óèè", "Óèç", "Óèå", "Óèã", "Óèä", "Óèâ", "Óèà", "Óéõ"]
  - name: battery
    symbols: ["Û∞Çé", "Û∞Å∫", "Û∞Åª", "Û∞Åº", "Û∞ÅΩ", "Û∞Åæ", "Û∞Åø", "Û∞ÇÄ", "Û∞ÇÅ", "Û∞ÇÇ", "Û∞Åπ"]

blocks:
  - name: battery
    interval: 2
    interpreter: mawk
    script: |
      BEGIN {
        capacity_file = "/sys/class/power_supply/BAT0/capacity"
        status_file = "/sys/class/power_supply/BAT0/status"

        getline capacity < capacity_file
        close(capacity_file)

        getline status < status_file
        close(status_file)

        if (status == "Charging") {
          print "‚ö° " capacity "%"
        } else {
          print capacity "%"
        }
      }
    output:
      full_text: |
        {{- $text := .Text -}}
        {{- if hasPrefix "‚ö°" $text -}}
          {{ $text }}
        {{- else -}}
          {{ Symbol $text "battery" }} {{ $text }}
        {{- end -}}

  - name: sound
    interval: 5
    interpreter: mawk
    script: |
      BEGIN {
          # ALSA command to get master volume and mute status
          cmd = "amixer sget Master"
          while ((cmd | getline line) > 0) {
              if (line ~ /\[off\]/) {
                  muted = "yes"
              } else if (line ~ /\[on\]/) {
                  muted = "no"
              }

              # Extract volume percentage
              if (line ~ /dB/) {
                  split(line, arr, "[][]")
                  volume = arr[2]
              }
          }
          close(cmd)

          if (muted == "yes") {
              print "Muted " volume
          } else {
              print volume
          }
      }
    output:
      full_text: |
        {{- $text := .Text -}}
        {{- if hasPrefix "Muted" $text -}}
          üîá {{ trimPrefix "Muted " $text }}
        {{- else if eq $text "N/A" -}}
          Û∞ü¶
        {{- else -}}
          {{ Symbol $text "sound" }} {{ $text }}
        {{- end -}}
    mouse_events:
      Left:
        command: 'amixer set Master toggle'
      ScrollUp:
        command: 'amixer set Master 2%+'
      ScrollDown:
        command: 'amixer set Master 2%-'

  - name: memory_usage
    interval: 10
    interpreter: mawk
    script: |
      BEGIN {
        while ((getline < "/proc/meminfo") > 0) {
          if ($1 == "MemTotal:") total = $2
          if ($1 == "MemAvailable:") available = $2
        }
        close("/proc/meminfo")
        used = total - available
        used_percent = (used / total) * 100
        printf "%d/%dMB %.2f\n", used/1024, total/1024, used_percent
      }
    output:
      full_text: '{{ $a := splitn " " 2 .Text }}{{Symbol $a._1 }}{{ $a._0 }}'

  - name: cpu_usage
    interval: 1
    interpreter: awk -e
    script: |
      BEGIN {
          # Read the load average from /proc/loadavg
          while ((getline line < "/proc/loadavg") > 0) {
              load = line
          }
          close("/proc/loadavg")

          # Read the number of CPUs from /proc/cpuinfo
          ncpu = 0
          while ((getline line < "/proc/cpuinfo") > 0) {
              if (line ~ /^processor/) {
                  ncpu++
              }
          }
          close("/proc/cpuinfo")

          # Calculate the CPU usage percentage
          pct = load

          # Print the CPU usage percentage
          printf "%.1f%\n", pct
      }
    output:
      full_text: "{{Symbol .Text}}CPU: {{.Text}}"

  - name: network_transit
    interval: 1
    interpreter: mawk
    script: |
      # Function to get rx and tx bytes
      function get_bytes(interface, file, result) {
          while ((getline line < file) > 0) {
              if (line ~ interface ":") {
                  split(line, a, ":")
                  split(a[2], b, " ")
                  result = b[1] "," b[9]
                  close(file)
                  return result
              }
          }
          close(file) 
          return "0,0"
      }
      BEGIN {
          interface = "eth0"
          file = "/proc/net/dev"

          # Get initial rx and tx bytes
          split(get_bytes(interface, file), initial, ",")
          rx_bytes_initial = initial[1] + 0  # Ensure numeric
          tx_bytes_initial = initial[2] + 0  # Ensure numeric

          system("sleep 0.5")

          # Get final rx and tx bytes
          split(get_bytes(interface, file), final, ",")
          rx_bytes_final = final[1] + 0  # Ensure numeric
          tx_bytes_final = final[2] + 0  # Ensure numeric

          # Calculate the difference
          rx_bytes_diff = rx_bytes_final - rx_bytes_initial
          tx_bytes_diff = tx_bytes_final - tx_bytes_initial

          # Convert bytes to Megabits
          rx_mbits = (rx_bytes_diff * 8) / 1000000
          tx_mbits = (tx_bytes_diff * 8) / 1000000

          printf "Rx: %.2fMb Tx: %.2fMb\n", rx_mbits, tx_mbits
      }
    output:
      full_text: |
        {{ $parts := split " " .Text -}}
        {{ $rx := $parts._1 -}}
        {{ $tx := $parts._3 -}}
        ‚Üì{{ $tx }} ‚Üë{{ $tx -}}

  - name: date_and_time
    interval: 5
    interpreter: mawk
    script: |
      BEGIN {
        # Get the current time
        current_time = systime()

        # Format the time as TIME 24HS format + DD/MM/YYYY
        formatted_time = strftime("%H:%M %d/%m/%Y", current_time)

        # Print the formatted time
        print formatted_time
      }
    output:
      full_text: |
        {{ .Text -}}
